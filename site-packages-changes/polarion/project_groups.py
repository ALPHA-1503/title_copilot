import sys
from .factory import createFromUri
from .workitem import Workitem
from .testrun import Testrun
from .user import User
from .plan import Plan
from .document import Document
from .project import Project


class ProjectGroup(object):

    def __init__(self, polarion, name):
        self.polarion = polarion
        self.name = name

        service = self.polarion.getService('Project')

        self.default_location = 'default:/'
        self.default_project_group = service.getProjectGroupAtLocation(self.default_location)

        try:
            self._project_group = self._find_group_recursive(self.default_project_group.uri, name)
            if self._project_group is None:
                raise Exception(f"Group {name} not found, are you sure it exists ?")
        except Exception:
            raise Exception(f"Error while getting the project group {name}")

        for attr, value in self._project_group.__dict__.items():
            for key in value:
                setattr(self, key, value[key])
        del self._project_group

    def _find_group_recursive(self, group_uri, target_name):
        service = self.polarion.getService('Project')
        group = service.getProjectGroup(group_uri)
        if group.name == target_name:
            return group
        else:
            subgroups = service.getContainedGroups(group.uri)
            for subgroup in subgroups:
                found_group = self._find_group_recursive(subgroup.uri, target_name)
                if found_group is not None:
                    return found_group
        return None

    def searchWorkitem(self, query, order='Created', field_list=None, limit=-1) -> list:
        if field_list is None:
            field_list = ['id']
        service = self.polarion.getService('Tracker')
        return service.queryWorkItemsLimited(
            query, order, field_list, limit)

    def getWorkitemsWithFields(self, query='', order='Created', limit=-1, field_list=None):
        return_list = []
        list_projects = ''

        service = self.polarion.getService('Project')
        projects = service.getDeepContainedProjects(self.uri)
        for project in projects:
            list_projects += project.id + ' '
        query += f' AND project.id:({list_projects})'

        workitems = self.searchWorkitem(query, order, ['id', 'project', 'type'], limit)

        for i, workitem in enumerate(workitems):
            sent = (' \u21AA  Loading workitems: ' + str(i + 1) + ' of ' + str(len(workitems)))
            sys.stdout.write('\r' + sent)
            return_list.append(
                Workitem(self.polarion, workitem.project, workitem.id, field_list=field_list))
        return return_list

    def getWorkitem(self, id: str) -> Workitem:
        workitem = self.searchWorkitem(f'id:{id}', field_list=['id', 'project'], limit=1)
        if len(workitem) == 0:
            raise Exception(f"Workitem {id} not found")
        return Workitem(self.polarion, workitem[0].project, workitem[0].id)
